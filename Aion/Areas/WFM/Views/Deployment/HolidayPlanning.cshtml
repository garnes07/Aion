@using Aion.ViewModels
@model Aion.Areas.WFM.ViewModels.Deployment.HolidayPlanningVm

@{
    ViewBag.Title = "Holiday Planning";
}

<div class="container-fluid">
    @if (Request.IsAuthenticated)
    {
        <div class="row justify-content-end mb-2">
            <div>
                @Html.Partial("~/Views/Shared/_selectMenu.cshtml")
            </div>
        </div>
    }
    @if (Model.MessageType == MessageType.Error)
    {
        <div class="alert alert-warning text-center"><strong>@Model.Message</strong></div>
    }
    else
    {
        <div class="card mb-3">
            <div class="card-header text-center">
                <div class="row justify-content-end">
                    <strong class="col-4">Holiday Planning</strong>
                    <div class="col-4">
                        <label class="switch float-right">
                            <input type="checkbox" id="advView" />
                            <span class="slider round"></span>
                        </label>
                        <span class="float-right adv-label">Advanced view</span>
                    </div>
                </div>
            </div>
            <div class="card-body">
                <p>
                    Great holiday management will enable you to contract to the max contract base and deliver your SOH budget each week. It's really important that our colleagues maintain a healthy work life balance and use their holiday to rest and take time away from work.<br />
                    Holiday needs to be used inline with the needs of the business so at some points we'll encourage more holiday e.g. at quiet times of the year. At other points, e.g. peak periods, holiday may be controlled to ensure we can deploy enough hours to capitalise on business opportunities.<br />
                </p>
                <p>
                    We've introduced simple guidance to help you understand the ideal amount of holiday hours for your specific store to use each week of the year through this easy access portal.
                </p>
                <div class="row justify-content-center mb-2">
                    <a class="btn btn-info" href="@Url.Action("Documents","Home", new { area = "", f = "HolidayGuidance.pdf" })" target="_blank">Holiday Guidance</a>
                </div>
            </div>
        </div>
        <div class="card mb-3">
            <div class="card-body">
                @*<div class="row justify-content-center">
                    <div class="col-6">
                        <table class="table table-bordered table-sm text-center" style="table-layout: fixed;">
                            <thead class="thead-blue">
                                <tr>
                                    <th class="text-center">YTD Taken</th>
                                    <th class="text-center">YTD Ideal</th>
                                    <th class="text-center">%</th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td class="text-center">@Model.YTDTaken</td>
                                    <td class="text-center">@Model.YTDGuideline</td>
                                    <td class="text-center">@string.Format("{0:0%}", Model.PercTaken)</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>*@
                @if (Model.PercTaken < 0.8)
                {
                    <div class="col-12 alert alert-warning text-center" style="font-size:small"><strong>Watch Out! </strong>You are underspent on holiday YTD, this may cause issues with deployment later in the year.</div>
                }
                else if (Model.PercTaken > 1.2)
                {
                    <div class="col-12 alert alert-warning text-center" style="font-size:small"><strong>Watch Out! </strong>You are overspent on holiday YTD, this may cause issues with deployment later in the year.</div>
                }
                <div class="box-body col-12">
                    <div class="chart" id="graph-container">
                        <canvas id="holiday-chart" style="height:250px"></canvas>
                    </div>
                </div>
            </div>
            <div class="card-footer text-center">
                <strong><u>Note:</u></strong> Scheduled hours are only displayed 7 weeks in advance.
            </div>
        </div>
        if (Model.DisplayLevel == 1)
        {
            @Html.Partial("~/Areas/WFM/Views/Deployment/Partials/_HolidayPlanningStore.cshtml")
        }
        else if (Model.DisplayLevel == 2)
        {
            @Html.Partial("~/Areas/WFM/Views/Deployment/Partials/_HolidayPlanningRegion.cshtml")
        }
        else if (Model.DisplayLevel == 3)
        {
            @Html.Partial("~/Areas/WFM/Views/Deployment/Partials/_HolidayPlanningDivision.cshtml")
        }
    }
</div>

@section myScripts
{
    @if (Model.MessageType != MessageType.Error)
    {
        <script src="~/Scripts/Chart.min.js"></script>
        <script>
            var depString = @Model.DeployedGraphArray;
            var myChart;
            var myData = {
                labels: ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','23','24','25','26','27','28','29','30','31','32','33','34','35','36','37','38','39','40','41','42','43','44','45','46','47','48','49','50','51','52'],
                datasets:
                        [{
                            label: "Ideal",
                            borderColor: 'rgba(118, 0, 69, 0.7)',
                            data: @Model.GuideGraphArray,
                            fill: false,
                            pointRadius: 0,
                            hitRadius: 4,
                            hoverBorderWidth: 0.5,
                            type: 'line',
                            tension: 0,
                            yAxisID: 'left-y-axis'
                        },
                        {
                            label: "Taken",
                            backgroundColor: 'rgba(0, 140, 168, 0.9)',
                            data: @Model.TakenGraphArray,
                            yAxisID: 'left-y-axis'
                        },
                        {
                            label: "Scheduled",
                            backgroundColor: 'rgba(0, 140, 168, 0.4)',
                            data: @Model.ScheduledGraphArray,
                            yAxisID: 'left-y-axis'
                        }
                        ]
            }
            var myOptions = {
                legend:{
                    position: 'bottom',
                },
                maintainAspectRatio: false,
                scales: {
                    xAxes: [{
                        stacked: true,
                        scaleLabel:{
                            display: true,
                            labelString: 'Week'
                        },
                        afterTickToLabelConversion: function(data){
                            var xLabels = data.ticks;
                            xLabels.forEach(function (labels, i) {
                                if (i % 2 == 1){
                                    xLabels[i] = '';
                                }
                            });
                        }
                    }],
                    yAxes: [{
                        id: 'left-y-axis',
                        stacked: true,
                        position: 'left',
                        gridLines: {
                            drawOnChartArea: false
                        }
                    }]
                },
                tooltips: {
                    mode: 'index',
                    callbacks: {
                        label: function(tooltipItem, data){
                            //return tooltipItems.yLabel + 'hrs';
                            var dataset = data.datasets[tooltipItem.datasetIndex];
                            if(dataset.yAxisID === "right-y-axis"){
                                return tooltipItem.yLabel + '%';
                            }
                            else{
                                return tooltipItem.yLabel + 'hrs';
                            };
                        }
                    }
                }
            }

            $(function() {
                var ctx = document.getElementById("holiday-chart")
                myChart = new Chart(ctx, {
                    // The type of chart we want to create
                    type: 'bar',
                    // The data for our dataset
                    data: myData,
                    // Configuration options go here
                    options: myOptions
                });
            });

            $('#advView').click(function(){
                var ctx = document.getElementById("holiday-chart")
                myChart.destroy();
                if(myData.datasets.length === 5){
                    myData.datasets.shift();
                    myData.datasets.pop();
                    myOptions.scales.yAxes.pop();
                    myOptions.scales.yAxes[0].scaleLabel = {
                        display: false,
                        labelString: 'Holiday Hrs'
                    };
                } else{
                    myData.datasets.unshift({
                        label: "Deployment",
                        borderColor: 'rgba(250, 43, 10, 0.9)',
                        data: depString,
                        fill: false,
                        pointRadius: 0,
                        hitRadius: 4,
                        hoverBorderWidth: 0.5,
                        type: 'line',
                        tension: 0,
                        yAxisID: 'right-y-axis'
                    });
                    myData.datasets.push({
                        label: "100% Deployment",
                        borderColor: 'rgba(250, 43, 10, 0.4)',
                        data: ['100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100','100'],
                        type: 'line',
                        fill: false,
                        pointRadius: 0,
                        hitRadius: 0,
                        hoverBorderWidth: 0,
                        yAxisID: 'right-y-axis',
                        borderDash: [5,5]
                    });
                    myOptions.scales.yAxes[0].scaleLabel = {
                        display: true,
                        labelString: 'Holiday Hrs'
                    };
                    myOptions.scales.yAxes.push({
                        id: 'right-y-axis',
                        stacked: false,
                        position: 'right',
                        ticks: {
                            beginAtZero: true,
                            min: 0,
                            stepSize: 20,
                            callback: function(value, index, values){
                                return value + '%';
                            }
                        },
                        gridLines: {
                            drawOnChartArea: false
                        },
                        scaleLabel:{
                            display: true,
                            labelString: 'Deployed to Budget'
                        }
                    });
                };
                myChart = new Chart(ctx, {
                    // The type of chart we want to create
                    type: 'bar',
                    // The data for our dataset
                    data: myData,
                    // Configuration options go here
                    options: myOptions
                });
            });
        </script>
    }
}
