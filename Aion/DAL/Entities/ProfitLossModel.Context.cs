//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Aion.DAL.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class ProfitLossModel : DbContext
    {
        public ProfitLossModel()
            : base("name=ProfitLossModel")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
    
        [DbFunction("ProfitLossModel", "fn_LatestPLRecord")]
        public virtual IQueryable<fn_LatestPLRecord_Result> fn_LatestPLRecord()
        {
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_LatestPLRecord_Result>("[ProfitLossModel].[fn_LatestPLRecord]()");
        }
    
        public virtual ObjectResult<sp_GetPandL_Result> sp_GetPandL(Nullable<int> storeNumber, string periodYear, Nullable<short> periodMonth, Nullable<short> qtdStartMonth, Nullable<short> ytdStartMonth)
        {
            var storeNumberParameter = storeNumber.HasValue ?
                new ObjectParameter("StoreNumber", storeNumber) :
                new ObjectParameter("StoreNumber", typeof(int));
    
            var periodYearParameter = periodYear != null ?
                new ObjectParameter("PeriodYear", periodYear) :
                new ObjectParameter("PeriodYear", typeof(string));
    
            var periodMonthParameter = periodMonth.HasValue ?
                new ObjectParameter("PeriodMonth", periodMonth) :
                new ObjectParameter("PeriodMonth", typeof(short));
    
            var qtdStartMonthParameter = qtdStartMonth.HasValue ?
                new ObjectParameter("QtdStartMonth", qtdStartMonth) :
                new ObjectParameter("QtdStartMonth", typeof(short));
    
            var ytdStartMonthParameter = ytdStartMonth.HasValue ?
                new ObjectParameter("YtdStartMonth", ytdStartMonth) :
                new ObjectParameter("YtdStartMonth", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPandL_Result>("sp_GetPandL", storeNumberParameter, periodYearParameter, periodMonthParameter, qtdStartMonthParameter, ytdStartMonthParameter);
        }
    
        public virtual ObjectResult<sp_GetPandLChannel_Result> sp_GetPandLChannel(string channelName, string periodYear, Nullable<short> periodMonth, Nullable<short> qtdStartMonth, Nullable<short> ytdStartMonth)
        {
            var channelNameParameter = channelName != null ?
                new ObjectParameter("ChannelName", channelName) :
                new ObjectParameter("ChannelName", typeof(string));
    
            var periodYearParameter = periodYear != null ?
                new ObjectParameter("PeriodYear", periodYear) :
                new ObjectParameter("PeriodYear", typeof(string));
    
            var periodMonthParameter = periodMonth.HasValue ?
                new ObjectParameter("PeriodMonth", periodMonth) :
                new ObjectParameter("PeriodMonth", typeof(short));
    
            var qtdStartMonthParameter = qtdStartMonth.HasValue ?
                new ObjectParameter("QtdStartMonth", qtdStartMonth) :
                new ObjectParameter("QtdStartMonth", typeof(short));
    
            var ytdStartMonthParameter = ytdStartMonth.HasValue ?
                new ObjectParameter("YtdStartMonth", ytdStartMonth) :
                new ObjectParameter("YtdStartMonth", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPandLChannel_Result>("sp_GetPandLChannel", channelNameParameter, periodYearParameter, periodMonthParameter, qtdStartMonthParameter, ytdStartMonthParameter);
        }
    
        public virtual ObjectResult<sp_GetPandLChannelSummary_Result> sp_GetPandLChannelSummary(string channelName, string periodYear, Nullable<short> periodMonth, Nullable<short> qtdStartMonth, Nullable<short> ytdStartMonth)
        {
            var channelNameParameter = channelName != null ?
                new ObjectParameter("ChannelName", channelName) :
                new ObjectParameter("ChannelName", typeof(string));
    
            var periodYearParameter = periodYear != null ?
                new ObjectParameter("PeriodYear", periodYear) :
                new ObjectParameter("PeriodYear", typeof(string));
    
            var periodMonthParameter = periodMonth.HasValue ?
                new ObjectParameter("PeriodMonth", periodMonth) :
                new ObjectParameter("PeriodMonth", typeof(short));
    
            var qtdStartMonthParameter = qtdStartMonth.HasValue ?
                new ObjectParameter("QtdStartMonth", qtdStartMonth) :
                new ObjectParameter("QtdStartMonth", typeof(short));
    
            var ytdStartMonthParameter = ytdStartMonth.HasValue ?
                new ObjectParameter("YtdStartMonth", ytdStartMonth) :
                new ObjectParameter("YtdStartMonth", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPandLChannelSummary_Result>("sp_GetPandLChannelSummary", channelNameParameter, periodYearParameter, periodMonthParameter, qtdStartMonthParameter, ytdStartMonthParameter);
        }
    
        public virtual ObjectResult<sp_GetPandLDivision_Result> sp_GetPandLDivision(string divisionName, string periodYear, Nullable<short> periodMonth, Nullable<short> qtdStartMonth, Nullable<short> ytdStartMonth)
        {
            var divisionNameParameter = divisionName != null ?
                new ObjectParameter("DivisionName", divisionName) :
                new ObjectParameter("DivisionName", typeof(string));
    
            var periodYearParameter = periodYear != null ?
                new ObjectParameter("PeriodYear", periodYear) :
                new ObjectParameter("PeriodYear", typeof(string));
    
            var periodMonthParameter = periodMonth.HasValue ?
                new ObjectParameter("PeriodMonth", periodMonth) :
                new ObjectParameter("PeriodMonth", typeof(short));
    
            var qtdStartMonthParameter = qtdStartMonth.HasValue ?
                new ObjectParameter("QtdStartMonth", qtdStartMonth) :
                new ObjectParameter("QtdStartMonth", typeof(short));
    
            var ytdStartMonthParameter = ytdStartMonth.HasValue ?
                new ObjectParameter("YtdStartMonth", ytdStartMonth) :
                new ObjectParameter("YtdStartMonth", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPandLDivision_Result>("sp_GetPandLDivision", divisionNameParameter, periodYearParameter, periodMonthParameter, qtdStartMonthParameter, ytdStartMonthParameter);
        }
    
        public virtual ObjectResult<sp_GetPandLDivisionSummary_Result> sp_GetPandLDivisionSummary(string divisionName, string periodYear, Nullable<short> periodMonth, Nullable<short> qtdStartMonth, Nullable<short> ytdStartMonth)
        {
            var divisionNameParameter = divisionName != null ?
                new ObjectParameter("DivisionName", divisionName) :
                new ObjectParameter("DivisionName", typeof(string));
    
            var periodYearParameter = periodYear != null ?
                new ObjectParameter("PeriodYear", periodYear) :
                new ObjectParameter("PeriodYear", typeof(string));
    
            var periodMonthParameter = periodMonth.HasValue ?
                new ObjectParameter("PeriodMonth", periodMonth) :
                new ObjectParameter("PeriodMonth", typeof(short));
    
            var qtdStartMonthParameter = qtdStartMonth.HasValue ?
                new ObjectParameter("QtdStartMonth", qtdStartMonth) :
                new ObjectParameter("QtdStartMonth", typeof(short));
    
            var ytdStartMonthParameter = ytdStartMonth.HasValue ?
                new ObjectParameter("YtdStartMonth", ytdStartMonth) :
                new ObjectParameter("YtdStartMonth", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPandLDivisionSummary_Result>("sp_GetPandLDivisionSummary", divisionNameParameter, periodYearParameter, periodMonthParameter, qtdStartMonthParameter, ytdStartMonthParameter);
        }
    
        public virtual ObjectResult<sp_GetPandLRegion_Result> sp_GetPandLRegion(string regionNumber, string periodYear, Nullable<short> periodMonth, Nullable<short> qtdStartMonth, Nullable<short> ytdStartMonth)
        {
            var regionNumberParameter = regionNumber != null ?
                new ObjectParameter("RegionNumber", regionNumber) :
                new ObjectParameter("RegionNumber", typeof(string));
    
            var periodYearParameter = periodYear != null ?
                new ObjectParameter("PeriodYear", periodYear) :
                new ObjectParameter("PeriodYear", typeof(string));
    
            var periodMonthParameter = periodMonth.HasValue ?
                new ObjectParameter("PeriodMonth", periodMonth) :
                new ObjectParameter("PeriodMonth", typeof(short));
    
            var qtdStartMonthParameter = qtdStartMonth.HasValue ?
                new ObjectParameter("QtdStartMonth", qtdStartMonth) :
                new ObjectParameter("QtdStartMonth", typeof(short));
    
            var ytdStartMonthParameter = ytdStartMonth.HasValue ?
                new ObjectParameter("YtdStartMonth", ytdStartMonth) :
                new ObjectParameter("YtdStartMonth", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPandLRegion_Result>("sp_GetPandLRegion", regionNumberParameter, periodYearParameter, periodMonthParameter, qtdStartMonthParameter, ytdStartMonthParameter);
        }
    
        public virtual ObjectResult<sp_GetPandLRegionSummary_Result> sp_GetPandLRegionSummary(string regionNumber, string periodYear, Nullable<short> periodMonth, Nullable<short> qtdStartMonth, Nullable<short> ytdStartMonth)
        {
            var regionNumberParameter = regionNumber != null ?
                new ObjectParameter("RegionNumber", regionNumber) :
                new ObjectParameter("RegionNumber", typeof(string));
    
            var periodYearParameter = periodYear != null ?
                new ObjectParameter("PeriodYear", periodYear) :
                new ObjectParameter("PeriodYear", typeof(string));
    
            var periodMonthParameter = periodMonth.HasValue ?
                new ObjectParameter("PeriodMonth", periodMonth) :
                new ObjectParameter("PeriodMonth", typeof(short));
    
            var qtdStartMonthParameter = qtdStartMonth.HasValue ?
                new ObjectParameter("QtdStartMonth", qtdStartMonth) :
                new ObjectParameter("QtdStartMonth", typeof(short));
    
            var ytdStartMonthParameter = ytdStartMonth.HasValue ?
                new ObjectParameter("YtdStartMonth", ytdStartMonth) :
                new ObjectParameter("YtdStartMonth", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPandLRegionSummary_Result>("sp_GetPandLRegionSummary", regionNumberParameter, periodYearParameter, periodMonthParameter, qtdStartMonthParameter, ytdStartMonthParameter);
        }
    }
}
