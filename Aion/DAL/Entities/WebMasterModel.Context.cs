//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Aion.DAL.Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WebMasterModel : DbContext
    {
        public WebMasterModel()
            : base("name=WebMasterModel")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<IpRef> IpRefs { get; set; }
        public virtual DbSet<StoreMaster> StoreMasters { get; set; }
        public virtual DbSet<UserLog> UserLogs { get; set; }
        public virtual DbSet<UnknownIpLog> UnknownIpLogs { get; set; }
        public virtual DbSet<WeekRef> WeekRefs { get; set; }
        public virtual DbSet<Group> Groups { get; set; }
        public virtual DbSet<RegionTPC> RegionTPCs { get; set; }
        public virtual DbSet<tempRegionLookup> tempRegionLookups { get; set; }
        public virtual DbSet<TicketAnswer> TicketAnswers { get; set; }
        public virtual DbSet<TicketAudit> TicketAudits { get; set; }
        public virtual DbSet<TicketComment> TicketComments { get; set; }
        public virtual DbSet<TicketStub> TicketStubs { get; set; }
        public virtual DbSet<TicketTemplate> TicketTemplates { get; set; }
        public virtual DbSet<TicketType> TicketTypes { get; set; }
        public virtual DbSet<UserGroup> UserGroups { get; set; }
        public virtual DbSet<TicketEscalation> TicketEscalations { get; set; }
        public virtual DbSet<UserAccessKey> UserAccessKeys { get; set; }
        public virtual DbSet<UserAccessArea> UserAccessAreas { get; set; }
        public virtual DbSet<UserAccess> UserAccesses { get; set; }
        public virtual DbSet<Last12MonthList> Last12MonthList { get; set; }
        public virtual DbSet<vw_TicketStubRef> vw_TicketStubRef { get; set; }
        public virtual DbSet<Activity> Activities { get; set; }
        public virtual DbSet<ActivityType> ActivityTypes { get; set; }
    
        public virtual ObjectResult<sp_CheckHelpTickets_Result> sp_CheckHelpTickets(Nullable<short> branchNum)
        {
            var branchNumParameter = branchNum.HasValue ?
                new ObjectParameter("BranchNum", branchNum) :
                new ObjectParameter("BranchNum", typeof(short));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_CheckHelpTickets_Result>("sp_CheckHelpTickets", branchNumParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_CheckAccessRight(Nullable<int> groupId, Nullable<int> ticketId, string username)
        {
            var groupIdParameter = groupId.HasValue ?
                new ObjectParameter("GroupId", groupId) :
                new ObjectParameter("GroupId", typeof(int));
    
            var ticketIdParameter = ticketId.HasValue ?
                new ObjectParameter("TicketId", ticketId) :
                new ObjectParameter("TicketId", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("Username", username) :
                new ObjectParameter("Username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_CheckAccessRight", groupIdParameter, ticketIdParameter, usernameParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> sp_ChkInteractLvl(Nullable<int> level, Nullable<int> ticketTypeId)
        {
            var levelParameter = level.HasValue ?
                new ObjectParameter("level", level) :
                new ObjectParameter("level", typeof(int));
    
            var ticketTypeIdParameter = ticketTypeId.HasValue ?
                new ObjectParameter("TicketTypeId", ticketTypeId) :
                new ObjectParameter("TicketTypeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("sp_ChkInteractLvl", levelParameter, ticketTypeIdParameter);
        }
    
        public virtual ObjectResult<sp_EscalationOptions_Result> sp_EscalationOptions(Nullable<int> ticketType, Nullable<int> level)
        {
            var ticketTypeParameter = ticketType.HasValue ?
                new ObjectParameter("TicketType", ticketType) :
                new ObjectParameter("TicketType", typeof(int));
    
            var levelParameter = level.HasValue ?
                new ObjectParameter("Level", level) :
                new ObjectParameter("Level", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_EscalationOptions_Result>("sp_EscalationOptions", ticketTypeParameter, levelParameter);
        }
    }
}
